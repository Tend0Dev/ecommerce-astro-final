import { c as createComponent, a as createAstro, r as renderTemplate, g as defineScriptVars, d as renderComponent, m as maybeRenderHead, f as addAttribute, F as Fragment, e as renderHead } from '../chunks/astro/server_G6lzf5hl.mjs';
import 'kleur/colors';
import { b as getCartWithProducts } from '../chunks/queries_BON_RnUO.mjs';
/* empty css                                   */
import { $ as $$Header } from '../chunks/Header_CmSBQoe_.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$Cart = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Cart;
  const userCookie = Astro2.cookies.get("user");
  let user = null;
  if (userCookie) {
    try {
      user = JSON.parse(userCookie.value);
    } catch (e) {
      user = null;
    }
  }
  let cartItems = [];
  let total = 0;
  if (user) {
    try {
      cartItems = await getCartWithProducts(user.id);
      total = cartItems.reduce((sum, item) => sum + item.Product.price * item.CartItem.quantity, 0);
    } catch (error) {
      console.error("Error al cargar el carrito:", error);
    }
  }
  const cartItemsData = cartItems.map((item) => ({
    id: item.CartItem.id,
    productId: item.Product.id,
    title: item.Product.title,
    description: item.Product.description,
    price: item.Product.price,
    oldPrice: item.Product.old_price,
    image: item.Product.image,
    stock: item.Product.stock,
    quantity: item.CartItem.quantity
  }));
  return renderTemplate(_a || (_a = __template(["", '<main data-astro-cid-atha5qgx> <h2 class="titulo-principal" data-astro-cid-atha5qgx>Carrito</h2> <div class="contenedor-carrito" data-astro-cid-atha5qgx> ', " </div> </main> <script>(function(){", "\n  // Datos del carrito\n  let cartItems = cartItemsData;\n  let total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n\n  // Funci\xF3n para actualizar el total\n  function updateTotal() {\n    const totalElement = document.getElementById('total');\n    if (totalElement) {\n      total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n      totalElement.textContent = total.toFixed(2);\n    }\n  }\n\n  // Funci\xF3n para actualizar el estado de los botones\n  function updateButtonStates(producto, cantidadActual, stock) {\n    const restarBtn = producto.querySelector('.restar');\n    const sumarBtn = producto.querySelector('.sumar');\n    \n    if (restarBtn) {\n      restarBtn.disabled = cantidadActual <= 1;\n      restarBtn.style.opacity = cantidadActual <= 1 ? '0.5' : '1';\n      restarBtn.style.cursor = cantidadActual <= 1 ? 'not-allowed' : 'pointer';\n    }\n    if (sumarBtn) {\n      sumarBtn.disabled = cantidadActual >= stock;\n      sumarBtn.style.opacity = cantidadActual >= stock ? '0.5' : '1';\n      sumarBtn.style.cursor = cantidadActual >= stock ? 'not-allowed' : 'pointer';\n    }\n  }\n\n  // Funci\xF3n para actualizar el contador del carrito en el header\n  function updateCartCounter() {\n    const numerito = document.getElementById('numerito');\n    if (numerito) {\n      const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n      numerito.textContent = totalItems.toString();\n      \n      // Si no hay items, ocultar el contador\n      if (totalItems === 0) {\n        numerito.style.display = 'none';\n      } else {\n        numerito.style.display = 'inline';\n      }\n      \n      // Disparar evento personalizado para actualizar el contador en el header\n      const event = new CustomEvent('cartUpdated', { \n        detail: { count: totalItems } \n      });\n      document.dispatchEvent(event);\n    }\n  }\n\n  // Funci\xF3n para mostrar el mensaje de carrito vac\xEDo\n  function showEmptyCartMessage() {\n    const carritoProductos = document.querySelector('.carrito-productos');\n    const carritoAcciones = document.querySelector('.carrito-acciones');\n    if (!carritoProductos) return;\n\n    // Limpiar el contenedor\n    carritoProductos.innerHTML = '';\n\n    // Ocultar los botones de acciones\n    if (carritoAcciones) {\n      carritoAcciones.style.display = 'none';\n    }\n\n    // Crear el contenedor del mensaje\n    const emptyContainer = document.createElement('div');\n    emptyContainer.className = 'carrito-vacio-container';\n    \n    // Crear el icono\n    const icon = document.createElement('i');\n    icon.className = 'bi bi-cart-x';\n    \n    // Crear el mensaje\n    const message = document.createElement('p');\n    message.className = 'carrito-vacio';\n    message.textContent = 'Tu carrito est\xE1 vac\xEDo';\n    \n    // Agregar un emoji como elemento separado para evitar problemas de codificaci\xF3n\n    const emoji = document.createElement('span');\n    emoji.textContent = ' \u{1F622}';\n    message.appendChild(emoji);\n    \n    // Crear el bot\xF3n\n    const button = document.createElement('a');\n    button.href = '/';\n    button.className = 'btn-buscar-productos';\n    button.innerHTML = '<i class=\"bi bi-search\"></i> Buscar productos';\n    \n    // Agregar los elementos al contenedor\n    emptyContainer.appendChild(icon);\n    emptyContainer.appendChild(message);\n    emptyContainer.appendChild(button);\n    \n    // Agregar el contenedor al carrito\n    carritoProductos.appendChild(emptyContainer);\n\n    // Forzar un reflow para asegurar que los estilos se apliquen\n    void emptyContainer.offsetHeight;\n\n    // Aplicar los estilos directamente\n    emptyContainer.style.display = 'flex';\n    emptyContainer.style.flexDirection = 'column';\n    emptyContainer.style.alignItems = 'center';\n    emptyContainer.style.justifyContent = 'center';\n    emptyContainer.style.padding = '3rem 1rem';\n    emptyContainer.style.textAlign = 'center';\n\n    icon.style.fontSize = '4rem';\n    icon.style.color = '#e74c3c';\n    icon.style.marginBottom = '1rem';\n\n    message.style.textAlign = 'center';\n    message.style.color = '#7f8c8d';\n    message.style.fontSize = '1.2rem';\n    message.style.marginBottom = '1.5rem';\n\n    button.style.display = 'inline-flex';\n    button.style.alignItems = 'center';\n    button.style.gap = '0.5rem';\n    button.style.background = '#3498db';\n    button.style.color = 'white';\n    button.style.padding = '0.8rem 1.5rem';\n    button.style.borderRadius = '4px';\n    button.style.textDecoration = 'none';\n    button.style.fontWeight = '500';\n    button.style.transition = 'background 0.3s ease';\n  }\n\n  // Inicializaci\xF3n cuando el DOM est\xE1 listo\n  document.addEventListener('DOMContentLoaded', () => {\n    const carritoProductos = document.getElementById('carrito-productos');\n    const carritoVacio = document.getElementById('carrito-vacio');\n    const totalElement = document.getElementById('total');\n    const vaciarCarritoBtn = document.getElementById('carrito-acciones-vaciar');\n    const comprarBtn = document.getElementById('carrito-acciones-comprar');\n\n    // Inicializar estados de botones\n    document.querySelectorAll('.carrito-producto').forEach(producto => {\n      const cantidadSpan = producto.querySelector('.carrito-producto-cantidad');\n      const cantidadActual = Math.floor(parseInt(cantidadSpan?.textContent || '0'));\n      const stock = parseInt(producto.getAttribute('data-stock') || '0');\n      updateButtonStates(producto, cantidadActual, stock);\n    });\n\n    // Manejar cambios de cantidad\n    carritoProductos?.addEventListener('click', async (e) => {\n      const target = e.target;\n      const producto = target.closest('.carrito-producto');\n      if (!producto) return;\n\n      const id = producto.getAttribute('data-id');\n      if (!id) return;\n\n      const cartItemId = parseInt(id);\n      const cantidadSpan = producto.querySelector('.carrito-producto-cantidad');\n      const cantidadActual = Math.floor(parseInt(cantidadSpan?.textContent || '0'));\n      const stock = parseInt(producto.getAttribute('data-stock') || '0');\n      const price = parseFloat(producto.getAttribute('data-price') || '0');\n\n      // Manejar bot\xF3n de sumar\n      if (target.classList.contains('sumar')) {\n        // Verificar si el bot\xF3n est\xE1 deshabilitado\n        if (target.disabled) return;\n        \n        // Verificar si podemos aumentar la cantidad\n        if (cantidadActual < stock) {\n          const nuevaCantidad = cantidadActual + 1;\n          \n          // Actualizar UI inmediatamente\n          cantidadSpan.textContent = nuevaCantidad.toString();\n          \n          // Actualizar datos locales\n          const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n          if (itemIndex !== -1) {\n            cartItems[itemIndex].quantity = nuevaCantidad;\n            updateTotal();\n            updateButtonStates(producto, nuevaCantidad, stock);\n            updateCartCounter();\n          }\n\n          // Actualizar en el servidor en segundo plano\n          try {\n            const response = await fetch(`/api/cart/update/${cartItemId}`, {\n              method: 'PATCH',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ quantity: nuevaCantidad })\n            });\n            if (!response.ok) throw new Error('Error al actualizar');\n          } catch (error) {\n            console.error('Error:', error);\n            // Revertir cambios si hay error\n            cantidadSpan.textContent = cantidadActual.toString();\n            const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n            if (itemIndex !== -1) {\n              cartItems[itemIndex].quantity = cantidadActual;\n              updateTotal();\n              updateButtonStates(producto, cantidadActual, stock);\n              updateCartCounter();\n            }\n            alert('Error al actualizar la cantidad');\n          }\n        }\n      } \n      // Manejar bot\xF3n de restar\n      else if (target.classList.contains('restar')) {\n        // Verificar si el bot\xF3n est\xE1 deshabilitado\n        if (target.disabled) return;\n        \n        // Verificar si podemos disminuir la cantidad\n        if (cantidadActual > 1) {\n          const nuevaCantidad = cantidadActual - 1;\n          \n          // Actualizar UI inmediatamente\n          cantidadSpan.textContent = nuevaCantidad.toString();\n          \n          // Actualizar datos locales\n          const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n          if (itemIndex !== -1) {\n            cartItems[itemIndex].quantity = nuevaCantidad;\n            updateTotal();\n            updateButtonStates(producto, nuevaCantidad, stock);\n            updateCartCounter();\n          }\n\n          // Actualizar en el servidor en segundo plano\n          try {\n            const response = await fetch(`/api/cart/update/${cartItemId}`, {\n              method: 'PATCH',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ quantity: nuevaCantidad })\n            });\n            if (!response.ok) throw new Error('Error al actualizar');\n          } catch (error) {\n            console.error('Error:', error);\n            // Revertir cambios si hay error\n            cantidadSpan.textContent = cantidadActual.toString();\n            const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n            if (itemIndex !== -1) {\n              cartItems[itemIndex].quantity = cantidadActual;\n              updateTotal();\n              updateButtonStates(producto, cantidadActual, stock);\n              updateCartCounter();\n            }\n            alert('Error al actualizar la cantidad');\n          }\n        }\n      }\n      // Manejar bot\xF3n de eliminar\n      else if (target.classList.contains('carrito-borrar-producto')) {\n        try {\n          const response = await fetch(`/api/cart/remove/${cartItemId}`, {\n            method: 'DELETE'\n          });\n          \n          if (response.ok) {\n            producto.remove();\n            cartItems = cartItems.filter(item => item.id !== cartItemId);\n            updateTotal();\n            updateCartCounter();\n            if (cartItems.length === 0) {\n              showEmptyCartMessage();\n            }\n          } else {\n            const errorData = await response.json();\n            alert('Error al eliminar el producto del carrito: ' + (errorData.error || 'Error desconocido'));\n          }\n        } catch (error) {\n          console.error('Error al eliminar producto:', error);\n          alert('Error al eliminar el producto del carrito');\n        }\n      }\n    });\n\n    // Vaciar carrito\n    vaciarCarritoBtn?.addEventListener('click', async () => {\n      if (!cartItems.length) {\n        alert('El carrito ya est\xE1 vac\xEDo');\n        return;\n      }\n\n      if (!confirm('\xBFEst\xE1s seguro de que deseas vaciar el carrito?')) {\n        return;\n      }\n\n      try {\n        // Primero vaciar el carrito en el servidor\n        const response = await fetch('/api/cart/clear', {\n          method: 'DELETE'\n        });\n\n        if (!response.ok) {\n          throw new Error('Error al vaciar el carrito');\n        }\n        \n        // Si la operaci\xF3n en el servidor fue exitosa, actualizar la UI\n        cartItems = [];\n        total = 0;\n        updateCartCounter();\n        \n        // Mostrar el mensaje de carrito vac\xEDo\n        showEmptyCartMessage();\n        \n      } catch (error) {\n        console.error('Error al vaciar el carrito:', error);\n        alert('Error al vaciar el carrito. Por favor, intenta de nuevo.');\n      }\n    });\n\n    // Comprar\n    comprarBtn?.addEventListener('click', () => {\n      if (cartItems.length === 0) {\n        alert('Tu carrito est\xE1 vac\xEDo. No puedes proceder con la compra.');\n        return;\n      }\n      window.location.href = '/checkout';\n    });\n  });\n})();<\/script> "], ["", '<main data-astro-cid-atha5qgx> <h2 class="titulo-principal" data-astro-cid-atha5qgx>Carrito</h2> <div class="contenedor-carrito" data-astro-cid-atha5qgx> ', " </div> </main> <script>(function(){", "\n  // Datos del carrito\n  let cartItems = cartItemsData;\n  let total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n\n  // Funci\xF3n para actualizar el total\n  function updateTotal() {\n    const totalElement = document.getElementById('total');\n    if (totalElement) {\n      total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n      totalElement.textContent = total.toFixed(2);\n    }\n  }\n\n  // Funci\xF3n para actualizar el estado de los botones\n  function updateButtonStates(producto, cantidadActual, stock) {\n    const restarBtn = producto.querySelector('.restar');\n    const sumarBtn = producto.querySelector('.sumar');\n    \n    if (restarBtn) {\n      restarBtn.disabled = cantidadActual <= 1;\n      restarBtn.style.opacity = cantidadActual <= 1 ? '0.5' : '1';\n      restarBtn.style.cursor = cantidadActual <= 1 ? 'not-allowed' : 'pointer';\n    }\n    if (sumarBtn) {\n      sumarBtn.disabled = cantidadActual >= stock;\n      sumarBtn.style.opacity = cantidadActual >= stock ? '0.5' : '1';\n      sumarBtn.style.cursor = cantidadActual >= stock ? 'not-allowed' : 'pointer';\n    }\n  }\n\n  // Funci\xF3n para actualizar el contador del carrito en el header\n  function updateCartCounter() {\n    const numerito = document.getElementById('numerito');\n    if (numerito) {\n      const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n      numerito.textContent = totalItems.toString();\n      \n      // Si no hay items, ocultar el contador\n      if (totalItems === 0) {\n        numerito.style.display = 'none';\n      } else {\n        numerito.style.display = 'inline';\n      }\n      \n      // Disparar evento personalizado para actualizar el contador en el header\n      const event = new CustomEvent('cartUpdated', { \n        detail: { count: totalItems } \n      });\n      document.dispatchEvent(event);\n    }\n  }\n\n  // Funci\xF3n para mostrar el mensaje de carrito vac\xEDo\n  function showEmptyCartMessage() {\n    const carritoProductos = document.querySelector('.carrito-productos');\n    const carritoAcciones = document.querySelector('.carrito-acciones');\n    if (!carritoProductos) return;\n\n    // Limpiar el contenedor\n    carritoProductos.innerHTML = '';\n\n    // Ocultar los botones de acciones\n    if (carritoAcciones) {\n      carritoAcciones.style.display = 'none';\n    }\n\n    // Crear el contenedor del mensaje\n    const emptyContainer = document.createElement('div');\n    emptyContainer.className = 'carrito-vacio-container';\n    \n    // Crear el icono\n    const icon = document.createElement('i');\n    icon.className = 'bi bi-cart-x';\n    \n    // Crear el mensaje\n    const message = document.createElement('p');\n    message.className = 'carrito-vacio';\n    message.textContent = 'Tu carrito est\xE1 vac\xEDo';\n    \n    // Agregar un emoji como elemento separado para evitar problemas de codificaci\xF3n\n    const emoji = document.createElement('span');\n    emoji.textContent = ' \u{1F622}';\n    message.appendChild(emoji);\n    \n    // Crear el bot\xF3n\n    const button = document.createElement('a');\n    button.href = '/';\n    button.className = 'btn-buscar-productos';\n    button.innerHTML = '<i class=\"bi bi-search\"></i> Buscar productos';\n    \n    // Agregar los elementos al contenedor\n    emptyContainer.appendChild(icon);\n    emptyContainer.appendChild(message);\n    emptyContainer.appendChild(button);\n    \n    // Agregar el contenedor al carrito\n    carritoProductos.appendChild(emptyContainer);\n\n    // Forzar un reflow para asegurar que los estilos se apliquen\n    void emptyContainer.offsetHeight;\n\n    // Aplicar los estilos directamente\n    emptyContainer.style.display = 'flex';\n    emptyContainer.style.flexDirection = 'column';\n    emptyContainer.style.alignItems = 'center';\n    emptyContainer.style.justifyContent = 'center';\n    emptyContainer.style.padding = '3rem 1rem';\n    emptyContainer.style.textAlign = 'center';\n\n    icon.style.fontSize = '4rem';\n    icon.style.color = '#e74c3c';\n    icon.style.marginBottom = '1rem';\n\n    message.style.textAlign = 'center';\n    message.style.color = '#7f8c8d';\n    message.style.fontSize = '1.2rem';\n    message.style.marginBottom = '1.5rem';\n\n    button.style.display = 'inline-flex';\n    button.style.alignItems = 'center';\n    button.style.gap = '0.5rem';\n    button.style.background = '#3498db';\n    button.style.color = 'white';\n    button.style.padding = '0.8rem 1.5rem';\n    button.style.borderRadius = '4px';\n    button.style.textDecoration = 'none';\n    button.style.fontWeight = '500';\n    button.style.transition = 'background 0.3s ease';\n  }\n\n  // Inicializaci\xF3n cuando el DOM est\xE1 listo\n  document.addEventListener('DOMContentLoaded', () => {\n    const carritoProductos = document.getElementById('carrito-productos');\n    const carritoVacio = document.getElementById('carrito-vacio');\n    const totalElement = document.getElementById('total');\n    const vaciarCarritoBtn = document.getElementById('carrito-acciones-vaciar');\n    const comprarBtn = document.getElementById('carrito-acciones-comprar');\n\n    // Inicializar estados de botones\n    document.querySelectorAll('.carrito-producto').forEach(producto => {\n      const cantidadSpan = producto.querySelector('.carrito-producto-cantidad');\n      const cantidadActual = Math.floor(parseInt(cantidadSpan?.textContent || '0'));\n      const stock = parseInt(producto.getAttribute('data-stock') || '0');\n      updateButtonStates(producto, cantidadActual, stock);\n    });\n\n    // Manejar cambios de cantidad\n    carritoProductos?.addEventListener('click', async (e) => {\n      const target = e.target;\n      const producto = target.closest('.carrito-producto');\n      if (!producto) return;\n\n      const id = producto.getAttribute('data-id');\n      if (!id) return;\n\n      const cartItemId = parseInt(id);\n      const cantidadSpan = producto.querySelector('.carrito-producto-cantidad');\n      const cantidadActual = Math.floor(parseInt(cantidadSpan?.textContent || '0'));\n      const stock = parseInt(producto.getAttribute('data-stock') || '0');\n      const price = parseFloat(producto.getAttribute('data-price') || '0');\n\n      // Manejar bot\xF3n de sumar\n      if (target.classList.contains('sumar')) {\n        // Verificar si el bot\xF3n est\xE1 deshabilitado\n        if (target.disabled) return;\n        \n        // Verificar si podemos aumentar la cantidad\n        if (cantidadActual < stock) {\n          const nuevaCantidad = cantidadActual + 1;\n          \n          // Actualizar UI inmediatamente\n          cantidadSpan.textContent = nuevaCantidad.toString();\n          \n          // Actualizar datos locales\n          const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n          if (itemIndex !== -1) {\n            cartItems[itemIndex].quantity = nuevaCantidad;\n            updateTotal();\n            updateButtonStates(producto, nuevaCantidad, stock);\n            updateCartCounter();\n          }\n\n          // Actualizar en el servidor en segundo plano\n          try {\n            const response = await fetch(\\`/api/cart/update/\\${cartItemId}\\`, {\n              method: 'PATCH',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ quantity: nuevaCantidad })\n            });\n            if (!response.ok) throw new Error('Error al actualizar');\n          } catch (error) {\n            console.error('Error:', error);\n            // Revertir cambios si hay error\n            cantidadSpan.textContent = cantidadActual.toString();\n            const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n            if (itemIndex !== -1) {\n              cartItems[itemIndex].quantity = cantidadActual;\n              updateTotal();\n              updateButtonStates(producto, cantidadActual, stock);\n              updateCartCounter();\n            }\n            alert('Error al actualizar la cantidad');\n          }\n        }\n      } \n      // Manejar bot\xF3n de restar\n      else if (target.classList.contains('restar')) {\n        // Verificar si el bot\xF3n est\xE1 deshabilitado\n        if (target.disabled) return;\n        \n        // Verificar si podemos disminuir la cantidad\n        if (cantidadActual > 1) {\n          const nuevaCantidad = cantidadActual - 1;\n          \n          // Actualizar UI inmediatamente\n          cantidadSpan.textContent = nuevaCantidad.toString();\n          \n          // Actualizar datos locales\n          const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n          if (itemIndex !== -1) {\n            cartItems[itemIndex].quantity = nuevaCantidad;\n            updateTotal();\n            updateButtonStates(producto, nuevaCantidad, stock);\n            updateCartCounter();\n          }\n\n          // Actualizar en el servidor en segundo plano\n          try {\n            const response = await fetch(\\`/api/cart/update/\\${cartItemId}\\`, {\n              method: 'PATCH',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ quantity: nuevaCantidad })\n            });\n            if (!response.ok) throw new Error('Error al actualizar');\n          } catch (error) {\n            console.error('Error:', error);\n            // Revertir cambios si hay error\n            cantidadSpan.textContent = cantidadActual.toString();\n            const itemIndex = cartItems.findIndex(item => item.id === cartItemId);\n            if (itemIndex !== -1) {\n              cartItems[itemIndex].quantity = cantidadActual;\n              updateTotal();\n              updateButtonStates(producto, cantidadActual, stock);\n              updateCartCounter();\n            }\n            alert('Error al actualizar la cantidad');\n          }\n        }\n      }\n      // Manejar bot\xF3n de eliminar\n      else if (target.classList.contains('carrito-borrar-producto')) {\n        try {\n          const response = await fetch(\\`/api/cart/remove/\\${cartItemId}\\`, {\n            method: 'DELETE'\n          });\n          \n          if (response.ok) {\n            producto.remove();\n            cartItems = cartItems.filter(item => item.id !== cartItemId);\n            updateTotal();\n            updateCartCounter();\n            if (cartItems.length === 0) {\n              showEmptyCartMessage();\n            }\n          } else {\n            const errorData = await response.json();\n            alert('Error al eliminar el producto del carrito: ' + (errorData.error || 'Error desconocido'));\n          }\n        } catch (error) {\n          console.error('Error al eliminar producto:', error);\n          alert('Error al eliminar el producto del carrito');\n        }\n      }\n    });\n\n    // Vaciar carrito\n    vaciarCarritoBtn?.addEventListener('click', async () => {\n      if (!cartItems.length) {\n        alert('El carrito ya est\xE1 vac\xEDo');\n        return;\n      }\n\n      if (!confirm('\xBFEst\xE1s seguro de que deseas vaciar el carrito?')) {\n        return;\n      }\n\n      try {\n        // Primero vaciar el carrito en el servidor\n        const response = await fetch('/api/cart/clear', {\n          method: 'DELETE'\n        });\n\n        if (!response.ok) {\n          throw new Error('Error al vaciar el carrito');\n        }\n        \n        // Si la operaci\xF3n en el servidor fue exitosa, actualizar la UI\n        cartItems = [];\n        total = 0;\n        updateCartCounter();\n        \n        // Mostrar el mensaje de carrito vac\xEDo\n        showEmptyCartMessage();\n        \n      } catch (error) {\n        console.error('Error al vaciar el carrito:', error);\n        alert('Error al vaciar el carrito. Por favor, intenta de nuevo.');\n      }\n    });\n\n    // Comprar\n    comprarBtn?.addEventListener('click', () => {\n      if (cartItems.length === 0) {\n        alert('Tu carrito est\xE1 vac\xEDo. No puedes proceder con la compra.');\n        return;\n      }\n      window.location.href = '/checkout';\n    });\n  });\n})();<\/script> "])), maybeRenderHead(), !user ? renderTemplate`<div class="carrito-vacio-container" data-astro-cid-atha5qgx> <i class="bi bi-cart-x" data-astro-cid-atha5qgx></i> <p class="carrito-vacio" data-astro-cid-atha5qgx>Por favor, <a href="/login/" data-astro-cid-atha5qgx>inicia sesión</a> para ver tu carrito.</p> </div>` : cartItems.length === 0 ? renderTemplate`<div class="carrito-vacio-container" data-astro-cid-atha5qgx> <i class="bi bi-cart-x" data-astro-cid-atha5qgx></i> <p id="carrito-vacio" class="carrito-vacio" data-astro-cid-atha5qgx>Tu carrito está vacío</p> <span class="carrito-vacio" data-astro-cid-atha5qgx> 😢</span> <a href="/" class="btn-buscar-productos" data-astro-cid-atha5qgx> <i class="bi bi-search" data-astro-cid-atha5qgx></i> Buscar productos
</a> </div>` : renderTemplate`${renderComponent($$result, "Fragment", Fragment, { "data-astro-cid-atha5qgx": true }, { "default": async ($$result2) => renderTemplate` <div id="carrito-productos" class="carrito-productos" data-astro-cid-atha5qgx> ${cartItems.map((item) => renderTemplate`<div class="carrito-producto"${addAttribute(item.CartItem.id, "data-id")}${addAttribute(item.Product.id, "data-product-id")}${addAttribute(item.Product.stock, "data-stock")}${addAttribute(item.Product.price, "data-price")} data-astro-cid-atha5qgx> <img${addAttribute(item.Product.image || "/placeholder.jpg", "src")}${addAttribute(item.Product.title, "alt")} data-astro-cid-atha5qgx> <div class="carrito-producto-detalles" data-astro-cid-atha5qgx> <h3 data-astro-cid-atha5qgx>${item.Product.title}</h3> <p data-astro-cid-atha5qgx>${item.Product.description || "Sin descripci\xF3n"}</p> <div class="carrito-producto-precio" data-astro-cid-atha5qgx> <span class="precio-actual" data-astro-cid-atha5qgx>$${item.Product.price.toFixed(2)}</span> ${item.Product.old_price && renderTemplate`<span class="precio-anterior" data-astro-cid-atha5qgx>$${item.Product.old_price.toFixed(2)}</span>`} </div> <div class="cantidad-control" data-astro-cid-atha5qgx> <button class="cantidad-btn restar"${addAttribute(item.CartItem.quantity <= 1, "disabled")} data-astro-cid-atha5qgx> <i class="bi bi-dash" data-astro-cid-atha5qgx></i> </button> <span class="carrito-producto-cantidad" data-astro-cid-atha5qgx>${item.CartItem.quantity}</span> <button class="cantidad-btn sumar"${addAttribute(item.CartItem.quantity >= item.Product.stock, "disabled")} data-astro-cid-atha5qgx> <i class="bi bi-plus" data-astro-cid-atha5qgx></i> </button> </div> <p class="carrito-cantidad-disponible" data-astro-cid-atha5qgx>Disponibles: ${item.Product.stock}</p> <button class="carrito-borrar-producto" data-astro-cid-atha5qgx> <i class="bi bi-trash" data-astro-cid-atha5qgx></i> </button> </div> </div>`)} </div> <div id="carrito-acciones" class="carrito-acciones" data-astro-cid-atha5qgx> <div class="carrito-acciones-izquierda" data-astro-cid-atha5qgx> <button id="carrito-acciones-vaciar" class="carrito-acciones-vaciar" data-astro-cid-atha5qgx>Vaciar carrito</button> </div> <div class="carrito-acciones-derecha" data-astro-cid-atha5qgx> <div class="carrito-acciones-total" data-astro-cid-atha5qgx> <p data-astro-cid-atha5qgx>Total:</p> <p id="total" data-astro-cid-atha5qgx>$${total.toFixed(2)}</p> </div> <button id="carrito-acciones-comprar" class="carrito-acciones-comprar" data-astro-cid-atha5qgx>Comprar ahora</button> </div> </div> ` })}`, defineScriptVars({ cartItemsData }));
}, "C:/Users/tendo/OneDrive/Desktop/astro-ecommerce/src/components/Cart.astro", void 0);

const $$Carrito = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`<html lang="es"> <head><meta charset="UTF-8"><title>Carrito</title><link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">${renderComponent($$result, "Header", $$Header, {})}${renderHead()}</head> <body> ${renderComponent($$result, "Cart", $$Cart, {})} </body></html>`;
}, "C:/Users/tendo/OneDrive/Desktop/astro-ecommerce/src/pages/carrito.astro", void 0);

const $$file = "C:/Users/tendo/OneDrive/Desktop/astro-ecommerce/src/pages/carrito.astro";
const $$url = "/carrito";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Carrito,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
